// Generated by CoffeeScript 1.8.0
var Game;

(function() {});

Game = (function() {
  var player_type;

  Game.prototype.cellSize = 16;

  Game.prototype.numberOfRows = 50;

  Game.prototype.numberOfColumns = 80;

  Game.prototype.tickLength = 100;

  Game.prototype.canvas = null;

  Game.prototype.drawingContext = null;

  Game.prototype.grid = null;

  Game.prototype.snack = null;

  Game.prototype.snake = null;

  Game.prototype.tail = {
    row: null,
    column: null
  };

  Game.prototype.running = null;

  Game.prototype.player = null;

  player_type = 0;

  function Game() {}

  Game.prototype.run = function() {
    this.running = false;
    this.createCanvas();
    this.resizeCanvas();
    this.createDrawingContext();
    this.initGrid();
    this.initSnack();
    this.initSnake();
    this.initPlayer(0);
    return this.draw();
  };

  Game.prototype.startGame = function() {
    this.running = true;
    this.gameLoop();
    return $('.overlay').hide();
  };

  Game.prototype.endGame = function() {
    window.removeEventListener("keydown", this.doKeyDown, true);
    console.log("event listener removed");
    this.running = false;
    $('.header').text("You Lost");
    $('.sub-header').text("score: " + this.snake.path.length);
    return $('.overlay').show();
  };

  Game.prototype.gameLoop = function() {
    var copy, move;
    this.draw();
    this.makeMove(this.snake.dir.x, this.snake.dir.y);
    copy = this.copyGameState(this.grid);
    move = this.player.move(copy, this.snake.head(), {
      row: this.snack.row,
      column: this.snack.column
    });
    if (move !== void 0) {
      this.makeMove(move.x, move.y);
    }
    return setTimeout((function(_this) {
      return function() {
        return _this.gameLoop();
      };
    })(this), this.tickLength);
  };

  Game.prototype.copyGameState = function(state) {
    return JSON.parse(JSON.stringify(state));
  };

  Game.prototype.makeMove = function(x, y) {
    var newX, newY;
    if (x >= -1 && x <= 1) {
      if (y >= -1 && y <= 1) {
        if (!((x === y && y === 0))) {
          newY = this.snake.head().row + y;
          newX = this.snake.head().column + x;
          newY = ((newY % this.numberOfRows) + this.numberOfRows) % this.numberOfRows;
          newX = ((newX % this.numberOfColumns) + this.numberOfColumns) % this.numberOfColumns;
          if (this.grid[newY][newX].isSnake === false) {
            if (!this.grid[newY][newX].isSnack) {
              this.grid[this.snake.tail().row][this.snake.tail().column].isSnake = false;
              this.snake.path.pop();
            } else {
              this.grid[this.snack.row][this.snack.column].isSnack = false;
              this.snack.place();
              this.grid[this.snack.row][this.snack.column].isSnack = true;
              this.tickLength = Math.round(this.tickLength / 1.1);
            }
            this.grid[newY][newX].isSnake = true;
            this.snake.path.unshift({
              row: newY,
              column: newX
            });
            return this.snake.dir = {
              x: x,
              y: y
            };
          } else if (!(x * -1 === this.snake.dir.x && y * -1 === this.snake.dir.y)) {
            return this.endGame();
          }
        }
      }
    }
  };

  Game.prototype.draw = function() {
    var column, row, _i, _ref, _results;
    _results = [];
    for (row = _i = 0, _ref = this.numberOfRows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (column = _j = 0, _ref1 = this.numberOfColumns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          _results1.push(this.drawCell(this.grid[row][column]));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Game.prototype.drawCell = function(cell) {
    var fillStyle, x, y;
    x = cell.column * this.cellSize;
    y = cell.row * this.cellSize;
    if (cell.isSnack) {
      fillStyle = 'rgb(242, 95, 65)';
    } else if (cell.isSnake) {
      fillStyle = 'rgb(138, 250, 50)';
    } else {
      fillStyle = 'rgb(50, 50, 50)';
    }
    this.drawingContext.strokeStyle = 'rgba(255, 255, 255, 0)';
    this.drawingContext.strokeRect(x, y, this.cellSize, this.cellSize);
    this.drawingContext.fillStyle = fillStyle;
    return this.drawingContext.fillRect(x, y, this.cellSize, this.cellSize);
  };

  Game.prototype.createCanvas = function() {
    this.canvas = document.createElement('canvas');
    this.canvas.id = "canvas";
    this.canvas.width = this.cellSize * this.numberOfColumns;
    return document.body.appendChild(this.canvas);
  };

  Game.prototype.resizeCanvas = function() {
    this.canvas.height = this.cellSize * this.numberOfRows;
    return this.canvas.width = this.cellSize * this.numberOfColumns;
  };

  Game.prototype.createDrawingContext = function() {
    return this.drawingContext = this.canvas.getContext('2d');
  };

  Game.prototype.initGrid = function() {
    var column, row, _i, _ref, _results;
    this.grid = [];
    _results = [];
    for (row = _i = 0, _ref = this.numberOfRows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
      this.grid[row] = [];
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (column = _j = 0, _ref1 = this.numberOfColumns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          _results1.push(this.grid[row][column] = this.createCell(row, column));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Game.prototype.createCell = function(row, column) {
    return {
      isSnake: false,
      isSnack: false,
      row: row,
      column: column
    };
  };

  Game.prototype.initSnack = function() {
    this.snack = new Snack(this.numberOfColumns, this.numberOfRows);
    return this.grid[this.snack.row][this.snack.column].isSnack = true;
  };

  Game.prototype.initSnake = function() {
    var cell, _i, _len, _ref, _results;
    this.snake = new Snake(this.numberOfColumns, this.numberOfRows);
    _ref = this.snake.path;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      _results.push(this.grid[cell.row][cell.column].isSnake = true);
    }
    return _results;
  };

  Game.prototype.initPlayer = function(type) {
    switch (type) {
      case 0:
        return this.player = new Player();
      case 1:
        this.player = new Computer();
        return this.startGame();
    }
  };

  return Game;

})();

window.Game = Game;
